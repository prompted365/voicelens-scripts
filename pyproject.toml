[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "voicelens-seeder"
version = "0.1.0"
description = "Synthetic data generation and analytics for voice AI systems"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Prompted LLC", email = "hello@prompted.com"},
]
maintainers = [
    {name = "Breyden Taylor", email = "breyden@prompted.com"},
]
keywords = ["voice-ai", "synthetic-data", "analytics", "conversation-intelligence"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat",
]
requires-python = ">=3.11"
dependencies = [
    "typer[all]>=0.9.0",
    "rich>=13.7.0",
    "questionary>=2.0.1",
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "sqlite-utils>=3.36.0",
    "orjson>=3.9.10",
    "tzdata>=2023.3",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "faker>=20.1.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "coverage[toml]>=7.3.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "types-pyyaml>=6.0.12",
    "types-requests>=2.31.0",
]
parquet = [
    "pyarrow>=14.0.0",
]
async = [
    "httpx>=0.25.0",
    "asyncio-throttle>=1.0.2",
]

[project.urls]
Homepage = "https://github.com/prompted365/voicelens-scripts"
Documentation = "https://github.com/prompted365/voicelens-scripts/blob/main/README.md"
Repository = "https://github.com/prompted365/voicelens-scripts.git"
"Bug Reports" = "https://github.com/prompted365/voicelens-scripts/issues"

[project.scripts]
voicelens = "voicelens_seeder.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "ARG002", # unused method argument
    "ARG003", # unused class method argument
    "SIM108", # if-else-block can be replaced with ternary operator
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "faker.*",
    "sqlite_utils.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slower)",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"